{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "#Lab 4\n",
        "\n",
        "#Group 6: Dizo, Montemayor, Ocampo, Shu Too, Yumol\n",
        "\n",
        "import os \n",
        "import csv\n",
        "import boto3\n",
        "\n",
        "#Creating the infections table\n",
        "\n",
        "def create_table(\n",
        "        table_name,\n",
        "        partition_key,\n",
        "        sort_key\n",
        "        ):\n",
        "\n",
        "    dynamodb = boto3.resource('dynamodb')\n",
        "\n",
        "    table_name = table_name\n",
        "    \n",
        "    attributes = [\n",
        "        {'AttributeName': partition_key, 'AttributeType': 'S'},\n",
        "        {'AttributeName': sort_key, 'AttributeType': 'N'},\n",
        "        ]\n",
        "    \n",
        "    key_schema = [{'AttributeName': partition_key, 'KeyType': 'HASH'}, \n",
        "                  {'AttributeName': sort_key, 'KeyType': 'RANGE'}]\n",
        "                  \n",
        "    provisioned_throughput = {'ReadCapacityUnits': 5, 'WriteCapacityUnits': 10}\n",
        "    \n",
        "    try:\n",
        "        table = dynamodb.create_table(TableName=table_name,\n",
        "                                      KeySchema=key_schema,\n",
        "                                      AttributeDefinitions=attributes,\n",
        "                                      ProvisionedThroughput=provisioned_throughput,\n",
        "                                      )\n",
        "        return table\n",
        "    except Exception as err:\n",
        "        print(\"{0} Table could not be created\".format(table_name))\n",
        "        print(\"Error message {0}\".format(err))\n",
        "        \n",
        "if __name__ == '__main__':\n",
        "    table = create_table(\"infections\", \"city\", \"id\")\n",
        "\n",
        "#Inserting the data from the CSV into the infections table\n",
        "\n",
        "dynamodb = boto3.resource('dynamodb')\n",
        "\n",
        "file_path = './InfectionsData.csv' #After uploading the CSV into the directory in AWS\n",
        "table = dynamodb.Table(\"infections\")\n",
        "if os.path.exists(file_path): #Takes the path file and returns 'true' if the file is present. If the file is not present, then the function returns 'false'.\n",
        "    with open(file_path, 'r', newline='') as CSV_FILE:\n",
        "        data = csv.reader(CSV_FILE, delimiter=',') #Delimiter specifies the character used to separate each field\n",
        "        columns = next(data) #Removes the header\n",
        "        for row in data:\n",
        "            table.put_item(\n",
        "                Item={\n",
        "                    'id':int(row[0]),\n",
        "                    'city':row[1],\n",
        "                    'date':row[2]\n",
        "                })\n",
        "                \n",
        "#Updating patient records\n",
        "\n",
        "dynamodb = boto3.resource('dynamodb', 'us-east-1')\n",
        "infections_table = dynamodb.Table('infections')\n",
        "\n",
        "Patient1 = infections_table.update_item(\n",
        "    Key = {'city': 'Salem',\n",
        "            'id' : 1\n",
        "        },\n",
        "    \n",
        "    AttributeUpdates = {\n",
        "        'PatientReportUrl' : {'Value' : 'https://us-west-2-aws-staging.s3.amazonaws.com/awsu-ilt/AWS-100-DEV/v2.2/binaries/input/lab-3-dynamoDB/PatientRecord1.txt',\n",
        "        'Action' : 'PUT'\n",
        "        }},\n",
        "    \n",
        "    ReturnValues = 'UPDATED_NEW'\n",
        "        )\n",
        "\n",
        "Patient2 = infections_table.update_item(\n",
        "    Key = {'city': 'Gallup',\n",
        "            'id' : 2\n",
        "        },\n",
        "    \n",
        "    UpdateExpression = 'SET PatientReportUrl = :PatientReportUrl',\n",
        "    ExpressionAttributeValues = {':PatientReportUrl' : 'https://us-west-2-aws-staging.s3.amazonaws.com/awsu-ilt/AWS-100-DEV/v2.2/binaries/input/lab-3-dynamoDB/PatientRecord2.txt'\n",
        "        },\n",
        "        \n",
        "    ReturnValues = 'UPDATED_NEW'\n",
        "        )\n",
        "\n",
        "Patient3 = infections_table.update_item(\n",
        "    Key = {'city': 'Reno',\n",
        "            'id' : 3\n",
        "        },\n",
        "    \n",
        "    UpdateExpression = 'SET PatientReportUrl = :PatientReportUrl',\n",
        "    ExpressionAttributeValues = {':PatientReportUrl' : 'https://us-west-2-aws-staging.s3.amazonaws.com/awsu-ilt/AWS-100-DEV/v2.2/binaries/input/lab-3-dynamoDB/PatientRecord3.txt'\n",
        "        },\n",
        "        \n",
        "    ReturnValues = 'UPDATED_NEW'\n",
        "        )"
      ],
      "metadata": {
        "id": "FhJ28b5Mijvz"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
